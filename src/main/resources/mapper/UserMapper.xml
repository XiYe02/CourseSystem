<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.coursesystem.mapper.UserMapper">
    
    <!-- 结果映射 -->
    <resultMap id="UserResultMap" type="org.example.coursesystem.entity.User">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="realName" column="real_name"/>
        <result property="email" column="email"/>
        <result property="phone" column="phone"/>
        <result property="role" column="role"/>
        <result property="status" column="status"/>
        <result property="createTime" column="created_time"/>
        <result property="updateTime" column="updated_time"/>
        <result property="lastLoginTime" column="last_login_time"/>
    </resultMap>
    
    <!-- 根据用户名查找用户 -->
    <select id="findByUsername" parameterType="string" resultMap="UserResultMap">
        SELECT id, username, password, real_name, email, phone, role, status, 
               created_time, updated_time, last_login_time
        FROM user 
        WHERE username = #{username}
    </select>
    
    <!-- 根据ID查找用户 -->
    <select id="findById" parameterType="long" resultMap="UserResultMap">
        SELECT id, username, password, real_name, email, phone, role, status, 
               created_time, updated_time, last_login_time
        FROM user 
        WHERE id = #{id}
    </select>
    
    <!-- 插入新用户 -->
    <insert id="insert" parameterType="org.example.coursesystem.entity.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user (username, password, real_name, email, phone, role, status, created_time, updated_time)
        VALUES (#{username}, #{password}, #{realName}, #{email}, #{phone}, #{role}, #{status}, #{createTime}, #{updateTime})
    </insert>
    
    <!-- 更新用户信息 -->
    <update id="update" parameterType="org.example.coursesystem.entity.User">
        UPDATE user 
        SET real_name = #{realName},
            email = #{email},
            phone = #{phone},
            role = #{role},
            status = #{status},
            updated_time = #{updateTime}
        WHERE id = #{id}
    </update>
    
    <!-- 根据ID删除用户 -->
    <delete id="deleteById" parameterType="long">
        DELETE FROM user WHERE id = #{id}
    </delete>
    
    <!-- 查询所有用户 -->
    <select id="findAll" resultMap="UserResultMap">
        SELECT id, username, password, real_name, email, phone, role, status, 
               created_time, updated_time, last_login_time
        FROM user 
        ORDER BY created_time DESC
    </select>
    
    <!-- 根据角色查询用户 -->
    <select id="findByRole" parameterType="string" resultMap="UserResultMap">
        SELECT id, username, password, real_name, email, phone, role, status, 
               created_time, updated_time, last_login_time
        FROM user 
        WHERE role = #{role}
        ORDER BY created_time DESC
    </select>
    
    <!-- 根据状态查询用户 -->
    <select id="findByStatus" parameterType="string" resultMap="UserResultMap">
        SELECT id, username, password, real_name, email, phone, role, status, 
               created_time, updated_time, last_login_time
        FROM user 
        WHERE status = #{status}
        ORDER BY created_time DESC
    </select>
    
    <!-- 更新用户最后登录时间 -->
    <update id="updateLastLoginTime">
        UPDATE user 
        SET last_login_time = #{lastLoginTime}
        WHERE username = #{username}
    </update>
    
    <!-- 检查用户名是否存在 -->
    <select id="existsByUsername" parameterType="string" resultType="boolean">
        SELECT COUNT(*) > 0 FROM user WHERE username = #{username}
    </select>
    
    <!-- 更新用户密码 -->
    <update id="updatePassword">
        UPDATE user 
        SET password = #{newPassword}, updated_time = NOW()
        WHERE username = #{username}
    </update>
    
    <!-- 更新用户状态 -->
    <update id="updateStatus">
        UPDATE user 
        SET status = #{status}, updated_time = NOW()
        WHERE username = #{username}
    </update>
    
</mapper>